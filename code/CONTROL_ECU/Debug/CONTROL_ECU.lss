
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002050  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002050  000020e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  000020f8  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001388  00000000  00000000  000044ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000059b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000776d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008658  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009408  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000097f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009fc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 08 	call	0x1088	; 0x1088 <main>
      8a:	0c 94 26 10 	jmp	0x204c	; 0x204c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <storePassword>:
 * 		store the password received from HMI_ECU
 *		store the re-entered password received from HMI_ECU
 *		compare the 2 passwords and store the password if it is right
 *		send a command to HMI_ECU whether the passwords match or not
 */
void storePassword(void) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	aa 97       	sbiw	r28, 0x2a	; 42
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	uint8 password[6], password_match[6];
	uint8 i = 0;
     b5e:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 flag = PASSWORDS_MATCH;
     b60:	81 ef       	ldi	r24, 0xF1	; 241
     b62:	8d 8f       	std	Y+29, r24	; 0x1d
	for (i = 0; i < 5; ++i) {
     b64:	1e 8e       	std	Y+30, r1	; 0x1e
     b66:	94 c0       	rjmp	.+296    	; 0xc90 <storePassword+0x14a>
		/*
		 * receive the password for the first time from HMI_ECU
		 * store the password in the EEPROM
		 * */
		password[i] = UART_receiveByte();
     b68:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b6a:	08 2f       	mov	r16, r24
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <UART_receiveByte>
     b72:	28 2f       	mov	r18, r24
     b74:	ce 01       	movw	r24, r28
     b76:	4f 96       	adiw	r24, 0x1f	; 31
     b78:	fc 01       	movw	r30, r24
     b7a:	e0 0f       	add	r30, r16
     b7c:	f1 1f       	adc	r31, r17
     b7e:	20 83       	st	Z, r18
		EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION + i, password[i]);
     b80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	80 5b       	subi	r24, 0xB0	; 176
     b88:	9f 4f       	sbci	r25, 0xFF	; 255
     b8a:	ac 01       	movw	r20, r24
     b8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	ce 01       	movw	r24, r28
     b94:	4f 96       	adiw	r24, 0x1f	; 31
     b96:	fc 01       	movw	r30, r24
     b98:	e2 0f       	add	r30, r18
     b9a:	f3 1f       	adc	r31, r19
     b9c:	20 81       	ld	r18, Z
     b9e:	ca 01       	movw	r24, r20
     ba0:	62 2f       	mov	r22, r18
     ba2:	0e 94 a4 0c 	call	0x1948	; 0x1948 <EEPROM_writeByte>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	aa ef       	ldi	r26, 0xFA	; 250
     bac:	b3 e4       	ldi	r27, 0x43	; 67
     bae:	89 8f       	std	Y+25, r24	; 0x19
     bb0:	9a 8f       	std	Y+26, r25	; 0x1a
     bb2:	ab 8f       	std	Y+27, r26	; 0x1b
     bb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb6:	69 8d       	ldd	r22, Y+25	; 0x19
     bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	4a ef       	ldi	r20, 0xFA	; 250
     bc4:	54 e4       	ldi	r21, 0x44	; 68
     bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	8d 8b       	std	Y+21, r24	; 0x15
     bd0:	9e 8b       	std	Y+22, r25	; 0x16
     bd2:	af 8b       	std	Y+23, r26	; 0x17
     bd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bd6:	6d 89       	ldd	r22, Y+21	; 0x15
     bd8:	7e 89       	ldd	r23, Y+22	; 0x16
     bda:	8f 89       	ldd	r24, Y+23	; 0x17
     bdc:	98 8d       	ldd	r25, Y+24	; 0x18
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e8       	ldi	r20, 0x80	; 128
     be4:	5f e3       	ldi	r21, 0x3F	; 63
     be6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bea:	88 23       	and	r24, r24
     bec:	2c f4       	brge	.+10     	; 0xbf8 <storePassword+0xb2>
		__ticks = 1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9c 8b       	std	Y+20, r25	; 0x14
     bf4:	8b 8b       	std	Y+19, r24	; 0x13
     bf6:	3f c0       	rjmp	.+126    	; 0xc76 <storePassword+0x130>
	else if (__tmp > 65535)
     bf8:	6d 89       	ldd	r22, Y+21	; 0x15
     bfa:	7e 89       	ldd	r23, Y+22	; 0x16
     bfc:	8f 89       	ldd	r24, Y+23	; 0x17
     bfe:	98 8d       	ldd	r25, Y+24	; 0x18
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	57 e4       	ldi	r21, 0x47	; 71
     c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	4c f5       	brge	.+82     	; 0xc62 <storePassword+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c10:	69 8d       	ldd	r22, Y+25	; 0x19
     c12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	bc 01       	movw	r22, r24
     c2a:	cd 01       	movw	r24, r26
     c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9c 8b       	std	Y+20, r25	; 0x14
     c36:	8b 8b       	std	Y+19, r24	; 0x13
     c38:	0f c0       	rjmp	.+30     	; 0xc58 <storePassword+0x112>
     c3a:	88 ec       	ldi	r24, 0xC8	; 200
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	9a 8b       	std	Y+18, r25	; 0x12
     c40:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c42:	89 89       	ldd	r24, Y+17	; 0x11
     c44:	9a 89       	ldd	r25, Y+18	; 0x12
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <storePassword+0x100>
     c4a:	9a 8b       	std	Y+18, r25	; 0x12
     c4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4e:	8b 89       	ldd	r24, Y+19	; 0x13
     c50:	9c 89       	ldd	r25, Y+20	; 0x14
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	9c 8b       	std	Y+20, r25	; 0x14
     c56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c58:	8b 89       	ldd	r24, Y+19	; 0x13
     c5a:	9c 89       	ldd	r25, Y+20	; 0x14
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	69 f7       	brne	.-38     	; 0xc3a <storePassword+0xf4>
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <storePassword+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c62:	6d 89       	ldd	r22, Y+21	; 0x15
     c64:	7e 89       	ldd	r23, Y+22	; 0x16
     c66:	8f 89       	ldd	r24, Y+23	; 0x17
     c68:	98 8d       	ldd	r25, Y+24	; 0x18
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	9c 8b       	std	Y+20, r25	; 0x14
     c74:	8b 8b       	std	Y+19, r24	; 0x13
     c76:	8b 89       	ldd	r24, Y+19	; 0x13
     c78:	9c 89       	ldd	r25, Y+20	; 0x14
     c7a:	98 8b       	std	Y+16, r25	; 0x10
     c7c:	8f 87       	std	Y+15, r24	; 0x0f
     c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c80:	98 89       	ldd	r25, Y+16	; 0x10
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <storePassword+0x13c>
     c86:	98 8b       	std	Y+16, r25	; 0x10
     c88:	8f 87       	std	Y+15, r24	; 0x0f
 */
void storePassword(void) {
	uint8 password[6], password_match[6];
	uint8 i = 0;
	uint8 flag = PASSWORDS_MATCH;
	for (i = 0; i < 5; ++i) {
     c8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	8e 8f       	std	Y+30, r24	; 0x1e
     c90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	08 f4       	brcc	.+2      	; 0xc98 <storePassword+0x152>
     c96:	68 cf       	rjmp	.-304    	; 0xb68 <storePassword+0x22>
		 * */
		password[i] = UART_receiveByte();
		EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION + i, password[i]);
		_delay_ms(500);
	}
	for (i = 0; i < 5; ++i) {
     c98:	1e 8e       	std	Y+30, r1	; 0x1e
     c9a:	94 c0       	rjmp	.+296    	; 0xdc4 <storePassword+0x27e>
		/*
		 * receive the password for the first time from HMI_ECU
		 * store the password in the EEPROM
		 * */
		password_match[i] = UART_receiveByte();
     c9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c9e:	08 2f       	mov	r16, r24
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <UART_receiveByte>
     ca6:	28 2f       	mov	r18, r24
     ca8:	ce 01       	movw	r24, r28
     caa:	85 96       	adiw	r24, 0x25	; 37
     cac:	fc 01       	movw	r30, r24
     cae:	e0 0f       	add	r30, r16
     cb0:	f1 1f       	adc	r31, r17
     cb2:	20 83       	st	Z, r18
		EEPROM_writeByte(PASSWORD_MATCH_ADDRESS_LOCATION + i,
     cb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	80 5a       	subi	r24, 0xA0	; 160
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	ac 01       	movw	r20, r24
     cc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	ce 01       	movw	r24, r28
     cc8:	85 96       	adiw	r24, 0x25	; 37
     cca:	fc 01       	movw	r30, r24
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	20 81       	ld	r18, Z
     cd2:	ca 01       	movw	r24, r20
     cd4:	62 2f       	mov	r22, r18
     cd6:	0e 94 a4 0c 	call	0x1948	; 0x1948 <EEPROM_writeByte>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	aa ef       	ldi	r26, 0xFA	; 250
     ce0:	b3 e4       	ldi	r27, 0x43	; 67
     ce2:	8b 87       	std	Y+11, r24	; 0x0b
     ce4:	9c 87       	std	Y+12, r25	; 0x0c
     ce6:	ad 87       	std	Y+13, r26	; 0x0d
     ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cea:	6b 85       	ldd	r22, Y+11	; 0x0b
     cec:	7c 85       	ldd	r23, Y+12	; 0x0c
     cee:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	4a ef       	ldi	r20, 0xFA	; 250
     cf8:	54 e4       	ldi	r21, 0x44	; 68
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8f 83       	std	Y+7, r24	; 0x07
     d04:	98 87       	std	Y+8, r25	; 0x08
     d06:	a9 87       	std	Y+9, r26	; 0x09
     d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d0a:	6f 81       	ldd	r22, Y+7	; 0x07
     d0c:	78 85       	ldd	r23, Y+8	; 0x08
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1e:	88 23       	and	r24, r24
     d20:	2c f4       	brge	.+10     	; 0xd2c <storePassword+0x1e6>
		__ticks = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9e 83       	std	Y+6, r25	; 0x06
     d28:	8d 83       	std	Y+5, r24	; 0x05
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <storePassword+0x264>
	else if (__tmp > 65535)
     d2c:	6f 81       	ldd	r22, Y+7	; 0x07
     d2e:	78 85       	ldd	r23, Y+8	; 0x08
     d30:	89 85       	ldd	r24, Y+9	; 0x09
     d32:	9a 85       	ldd	r25, Y+10	; 0x0a
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	4f e7       	ldi	r20, 0x7F	; 127
     d3a:	57 e4       	ldi	r21, 0x47	; 71
     d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f5       	brge	.+82     	; 0xd96 <storePassword+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d44:	6b 85       	ldd	r22, Y+11	; 0x0b
     d46:	7c 85       	ldd	r23, Y+12	; 0x0c
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e2       	ldi	r20, 0x20	; 32
     d52:	51 e4       	ldi	r21, 0x41	; 65
     d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <storePassword+0x246>
     d6e:	88 ec       	ldi	r24, 0xC8	; 200
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <storePassword+0x234>
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
     d8e:	9e 81       	ldd	r25, Y+6	; 0x06
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	69 f7       	brne	.-38     	; 0xd6e <storePassword+0x228>
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <storePassword+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9e 83       	std	Y+6, r25	; 0x06
     da8:	8d 83       	std	Y+5, r24	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <storePassword+0x270>
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
		 * */
		password[i] = UART_receiveByte();
		EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION + i, password[i]);
		_delay_ms(500);
	}
	for (i = 0; i < 5; ++i) {
     dbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	8e 8f       	std	Y+30, r24	; 0x1e
     dc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc6:	85 30       	cpi	r24, 0x05	; 5
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <storePassword+0x286>
     dca:	68 cf       	rjmp	.-304    	; 0xc9c <storePassword+0x156>
		EEPROM_writeByte(PASSWORD_MATCH_ADDRESS_LOCATION + i,
				password_match[i]);
		_delay_ms(500);
	}

	for (i = 0; i < 5; ++i) {
     dcc:	1e 8e       	std	Y+30, r1	; 0x1e
     dce:	1a c0       	rjmp	.+52     	; 0xe04 <storePassword+0x2be>
		/*if passwords do not match clear the flag*/
		if (password[i] != password_match[i]) {
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	ce 01       	movw	r24, r28
     dd8:	4f 96       	adiw	r24, 0x1f	; 31
     dda:	fc 01       	movw	r30, r24
     ddc:	e2 0f       	add	r30, r18
     dde:	f3 1f       	adc	r31, r19
     de0:	40 81       	ld	r20, Z
     de2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	ce 01       	movw	r24, r28
     dea:	85 96       	adiw	r24, 0x25	; 37
     dec:	fc 01       	movw	r30, r24
     dee:	e2 0f       	add	r30, r18
     df0:	f3 1f       	adc	r31, r19
     df2:	80 81       	ld	r24, Z
     df4:	48 17       	cp	r20, r24
     df6:	19 f0       	breq	.+6      	; 0xdfe <storePassword+0x2b8>
			flag = PASSWORDS_NOT_MATCH;
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	8d 8f       	std	Y+29, r24	; 0x1d
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <storePassword+0x2c4>
		EEPROM_writeByte(PASSWORD_MATCH_ADDRESS_LOCATION + i,
				password_match[i]);
		_delay_ms(500);
	}

	for (i = 0; i < 5; ++i) {
     dfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e00:	8f 5f       	subi	r24, 0xFF	; 255
     e02:	8e 8f       	std	Y+30, r24	; 0x1e
     e04:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e06:	85 30       	cpi	r24, 0x05	; 5
     e08:	18 f3       	brcs	.-58     	; 0xdd0 <storePassword+0x28a>
		if (password[i] != password_match[i]) {
			flag = PASSWORDS_NOT_MATCH;
			break;
		}
	}
	if (flag == PASSWORDS_MATCH) {
     e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e0c:	81 3f       	cpi	r24, 0xF1	; 241
     e0e:	c1 f4       	brne	.+48     	; 0xe40 <storePassword+0x2fa>
		for (i = 0; i < 5; ++i) {
     e10:	1e 8e       	std	Y+30, r1	; 0x1e
     e12:	13 c0       	rjmp	.+38     	; 0xe3a <storePassword+0x2f4>
			g_staticPassword[i] = password[i];
     e14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e16:	48 2f       	mov	r20, r24
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	ce 01       	movw	r24, r28
     e22:	4f 96       	adiw	r24, 0x1f	; 31
     e24:	fc 01       	movw	r30, r24
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	80 81       	ld	r24, Z
     e2c:	fa 01       	movw	r30, r20
     e2e:	e9 58       	subi	r30, 0x89	; 137
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 83       	st	Z, r24
			flag = PASSWORDS_NOT_MATCH;
			break;
		}
	}
	if (flag == PASSWORDS_MATCH) {
		for (i = 0; i < 5; ++i) {
     e34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
     e3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e3c:	85 30       	cpi	r24, 0x05	; 5
     e3e:	50 f3       	brcs	.-44     	; 0xe14 <storePassword+0x2ce>
			g_staticPassword[i] = password[i];
		}
	}

	/* send the flag to the GMI_ECU */
	UART_sendByte(flag);
     e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e42:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <UART_sendByte>
}
     e46:	aa 96       	adiw	r28, 0x2a	; 42
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <verifyPassword>:
/* Description:
 * 	   receive password and from HMI_ECU
 * 	   verify if the stored password is the same as the user entered
 * 	   send command to the HMI_ECU whether the passwords match or not
 */
void verifyPassword(void) {
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	66 97       	sbiw	r28, 0x16	; 22
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 password[6];
	uint8 flag = PASSWORDS_MATCH;
     e74:	81 ef       	ldi	r24, 0xF1	; 241
     e76:	8f 87       	std	Y+15, r24	; 0x0f
	for (i = 0; i < 5; ++i) {
     e78:	18 8a       	std	Y+16, r1	; 0x10
     e7a:	81 c0       	rjmp	.+258    	; 0xf7e <verifyPassword+0x122>
		/*receive the password for the second time from HMI_ECU*/
		password[i] = UART_receiveByte();
     e7c:	88 89       	ldd	r24, Y+16	; 0x10
     e7e:	08 2f       	mov	r16, r24
     e80:	10 e0       	ldi	r17, 0x00	; 0
     e82:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <UART_receiveByte>
     e86:	28 2f       	mov	r18, r24
     e88:	ce 01       	movw	r24, r28
     e8a:	41 96       	adiw	r24, 0x11	; 17
     e8c:	fc 01       	movw	r30, r24
     e8e:	e0 0f       	add	r30, r16
     e90:	f1 1f       	adc	r31, r17
     e92:	20 83       	st	Z, r18
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	aa ef       	ldi	r26, 0xFA	; 250
     e9a:	b3 e4       	ldi	r27, 0x43	; 67
     e9c:	8b 87       	std	Y+11, r24	; 0x0b
     e9e:	9c 87       	std	Y+12, r25	; 0x0c
     ea0:	ad 87       	std	Y+13, r26	; 0x0d
     ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4a ef       	ldi	r20, 0xFA	; 250
     eb2:	54 e4       	ldi	r21, 0x44	; 68
     eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	8f 83       	std	Y+7, r24	; 0x07
     ebe:	98 87       	std	Y+8, r25	; 0x08
     ec0:	a9 87       	std	Y+9, r26	; 0x09
     ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ec4:	6f 81       	ldd	r22, Y+7	; 0x07
     ec6:	78 85       	ldd	r23, Y+8	; 0x08
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e8       	ldi	r20, 0x80	; 128
     ed2:	5f e3       	ldi	r21, 0x3F	; 63
     ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed8:	88 23       	and	r24, r24
     eda:	2c f4       	brge	.+10     	; 0xee6 <verifyPassword+0x8a>
		__ticks = 1;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	3f c0       	rjmp	.+126    	; 0xf64 <verifyPassword+0x108>
	else if (__tmp > 65535)
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efa:	18 16       	cp	r1, r24
     efc:	4c f5       	brge	.+82     	; 0xf50 <verifyPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efe:	6b 85       	ldd	r22, Y+11	; 0x0b
     f00:	7c 85       	ldd	r23, Y+12	; 0x0c
     f02:	8d 85       	ldd	r24, Y+13	; 0x0d
     f04:	9e 85       	ldd	r25, Y+14	; 0x0e
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e2       	ldi	r20, 0x20	; 32
     f0c:	51 e4       	ldi	r21, 0x41	; 65
     f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	9e 83       	std	Y+6, r25	; 0x06
     f24:	8d 83       	std	Y+5, r24	; 0x05
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <verifyPassword+0xea>
     f28:	88 ec       	ldi	r24, 0xC8	; 200
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <verifyPassword+0xd8>
     f38:	9c 83       	std	Y+4, r25	; 0x04
     f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	69 f7       	brne	.-38     	; 0xf28 <verifyPassword+0xcc>
     f4e:	14 c0       	rjmp	.+40     	; 0xf78 <verifyPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f50:	6f 81       	ldd	r22, Y+7	; 0x07
     f52:	78 85       	ldd	r23, Y+8	; 0x08
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <verifyPassword+0x114>
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
 */
void verifyPassword(void) {
	uint8 i;
	uint8 password[6];
	uint8 flag = PASSWORDS_MATCH;
	for (i = 0; i < 5; ++i) {
     f78:	88 89       	ldd	r24, Y+16	; 0x10
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	88 8b       	std	Y+16, r24	; 0x10
     f7e:	88 89       	ldd	r24, Y+16	; 0x10
     f80:	85 30       	cpi	r24, 0x05	; 5
     f82:	08 f4       	brcc	.+2      	; 0xf86 <verifyPassword+0x12a>
     f84:	7b cf       	rjmp	.-266    	; 0xe7c <verifyPassword+0x20>
		/*receive the password for the second time from HMI_ECU*/
		password[i] = UART_receiveByte();
		_delay_ms(500);
	}
	for (i = 0; i < 5; ++i) {
     f86:	18 8a       	std	Y+16, r1	; 0x10
     f88:	18 c0       	rjmp	.+48     	; 0xfba <verifyPassword+0x15e>
		/*if passwords do not match clear the flag*/
		if (password[i] != g_staticPassword[i]) {
     f8a:	88 89       	ldd	r24, Y+16	; 0x10
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	ce 01       	movw	r24, r28
     f92:	41 96       	adiw	r24, 0x11	; 17
     f94:	fc 01       	movw	r30, r24
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	20 81       	ld	r18, Z
     f9c:	88 89       	ldd	r24, Y+16	; 0x10
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	fc 01       	movw	r30, r24
     fa4:	e9 58       	subi	r30, 0x89	; 137
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	28 17       	cp	r18, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <verifyPassword+0x158>
			flag = PASSWORDS_NOT_MATCH;
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	8f 87       	std	Y+15, r24	; 0x0f
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <verifyPassword+0x164>
	for (i = 0; i < 5; ++i) {
		/*receive the password for the second time from HMI_ECU*/
		password[i] = UART_receiveByte();
		_delay_ms(500);
	}
	for (i = 0; i < 5; ++i) {
     fb4:	88 89       	ldd	r24, Y+16	; 0x10
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	88 8b       	std	Y+16, r24	; 0x10
     fba:	88 89       	ldd	r24, Y+16	; 0x10
     fbc:	85 30       	cpi	r24, 0x05	; 5
     fbe:	28 f3       	brcs	.-54     	; 0xf8a <verifyPassword+0x12e>
			flag = PASSWORDS_NOT_MATCH;
			break;
		}
	}
	/*send a flag whether the password matched or not*/
	UART_sendByte(flag);
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <UART_sendByte>

}
     fc6:	66 96       	adiw	r28, 0x16	; 22
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <operateMotor>:
 * if the received byte is open the door
 * rotate the DC-motor CW for 15 seconds
 * then hold it for 3 seconds
 * and then rotate it ACW for 15 seconds
 */
void operateMotor(void) {
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	/*turn on timer1*/
	Timer1_init(&timer1_config_ptr);
     fe4:	88 e6       	ldi	r24, 0x68	; 104
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Timer1_init>

	/*rotate CW for 15 seconds (Unlocking the door)*/
	DcMotor_Rotate(CW, 100);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	64 e6       	ldi	r22, 0x64	; 100
     ff0:	0e 94 49 0c 	call	0x1892	; 0x1892 <DcMotor_Rotate>
	g_countSeconds = 0;
     ff4:	10 92 74 00 	sts	0x0074, r1
	while (g_countSeconds != 15) {
     ff8:	80 91 74 00 	lds	r24, 0x0074
     ffc:	8f 30       	cpi	r24, 0x0F	; 15
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <operateMotor+0x1c>
	}

	/*hold for 3 seconds (holding the door)*/
	DcMotor_Rotate(OFF, 0);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	0e 94 49 0c 	call	0x1892	; 0x1892 <DcMotor_Rotate>
	g_countSeconds = 0;
    1008:	10 92 74 00 	sts	0x0074, r1
	while (g_countSeconds != 3) {
    100c:	80 91 74 00 	lds	r24, 0x0074
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	e1 f7       	brne	.-8      	; 0x100c <operateMotor+0x30>
	}

	/*rotate ACW for 15 seconds (Locking the door)*/
	DcMotor_Rotate(ACW, 100);
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	64 e6       	ldi	r22, 0x64	; 100
    1018:	0e 94 49 0c 	call	0x1892	; 0x1892 <DcMotor_Rotate>
	g_countSeconds = 0;
    101c:	10 92 74 00 	sts	0x0074, r1
	while (g_countSeconds != 15) {
    1020:	80 91 74 00 	lds	r24, 0x0074
    1024:	8f 30       	cpi	r24, 0x0F	; 15
    1026:	e1 f7       	brne	.-8      	; 0x1020 <operateMotor+0x44>
	}

	/*stop the DC-motor*/
	DcMotor_Rotate(OFF, 0);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DcMotor_Rotate>

	/*clear the seconds counter*/
	g_countSeconds = 0;
    1030:	10 92 74 00 	sts	0x0074, r1
	/*turn off the timer*/
	Timer1_deInit();
    1034:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <Timer1_deInit>
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <operateBuzzer>:

/* Description:
 * enable the buzzer for 1 minute
 * then turn the buzzer off
 */
void operateBuzzer(void) {
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	/*turn on timer1*/
	Timer1_init(&timer1_config_ptr);
    1046:	88 e6       	ldi	r24, 0x68	; 104
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Timer1_init>

	/*clear seconds counter*/
	g_countSeconds = 0;
    104e:	10 92 74 00 	sts	0x0074, r1
	Buzzer_on();
    1052:	0e 94 16 0c 	call	0x182c	; 0x182c <Buzzer_on>
	while (g_countSeconds != 60) {
    1056:	80 91 74 00 	lds	r24, 0x0074
    105a:	8c 33       	cpi	r24, 0x3C	; 60
    105c:	e1 f7       	brne	.-8      	; 0x1056 <operateBuzzer+0x18>
	}
	Buzzer_off();
    105e:	0e 94 22 0c 	call	0x1844	; 0x1844 <Buzzer_off>
	g_countSeconds = 0;
    1062:	10 92 74 00 	sts	0x0074, r1

	/*turn off the timer*/
	Timer1_deInit();
    1066:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <Timer1_deInit>
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <Timer1_INT>:

/* Description:
 * 	call back function
 *  called in timer1 ISR
 */
void Timer1_INT(void) {
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	g_countSeconds++;
    1078:	80 91 74 00 	lds	r24, 0x0074
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 74 00 	sts	0x0074, r24
}
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <main>:

int main(void) {
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	2c 97       	sbiw	r28, 0x0c	; 12
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7);
    109c:	af e5       	ldi	r26, 0x5F	; 95
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ef e5       	ldi	r30, 0x5F	; 95
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	80 68       	ori	r24, 0x80	; 128
    10a8:	8c 93       	st	X, r24
	 *		char size 8 bits,
	 *		no parity checking
	 *		and one bit for stop bit
	 */
	UART_ConfigType uart_config_ptr = { baud_rate_9600, char_size_8,
			disabled_parity, one_bit_stop_bit };
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	99 87       	std	Y+9, r25	; 0x09
    10b0:	88 87       	std	Y+8, r24	; 0x08
    10b2:	ee e6       	ldi	r30, 0x6E	; 110
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	fb 87       	std	Y+11, r31	; 0x0b
    10b8:	ea 87       	std	Y+10, r30	; 0x0a
    10ba:	f5 e0       	ldi	r31, 0x05	; 5
    10bc:	fc 87       	std	Y+12, r31	; 0x0c
    10be:	ea 85       	ldd	r30, Y+10	; 0x0a
    10c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    10c2:	00 80       	ld	r0, Z
    10c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	9b 87       	std	Y+11, r25	; 0x0b
    10cc:	8a 87       	std	Y+10, r24	; 0x0a
    10ce:	e8 85       	ldd	r30, Y+8	; 0x08
    10d0:	f9 85       	ldd	r31, Y+9	; 0x09
    10d2:	00 82       	st	Z, r0
    10d4:	88 85       	ldd	r24, Y+8	; 0x08
    10d6:	99 85       	ldd	r25, Y+9	; 0x09
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	99 87       	std	Y+9, r25	; 0x09
    10dc:	88 87       	std	Y+8, r24	; 0x08
    10de:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e0:	91 50       	subi	r25, 0x01	; 1
    10e2:	9c 87       	std	Y+12, r25	; 0x0c
    10e4:	ec 85       	ldd	r30, Y+12	; 0x0c
    10e6:	ee 23       	and	r30, r30
    10e8:	51 f7       	brne	.-44     	; 0x10be <main+0x36>
	UART_init(&uart_config_ptr);
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <UART_init>

	TWI_ConfigType twi_config_ptr = { address_1, bit_rate_400Kbits };
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	8e 83       	std	Y+6, r24	; 0x06
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	8f 83       	std	Y+7, r24	; 0x07
	TWI_init(&twi_config_ptr);
    10fa:	ce 01       	movw	r24, r28
    10fc:	06 96       	adiw	r24, 0x06	; 6
    10fe:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <TWI_init>
	/*set the call back function for timer1 to count seconds*/
	Timer1_setCallBack(Timer1_INT);
    1102:	88 e3       	ldi	r24, 0x38	; 56
    1104:	98 e0       	ldi	r25, 0x08	; 8
    1106:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Timer1_setCallBack>

	/*call the initialize functions for both buzzer and DC-motor*/
	Buzzer_init();
    110a:	0e 94 05 0c 	call	0x180a	; 0x180a <Buzzer_init>
	DcMotor_Init();
    110e:	0e 94 2e 0c 	call	0x185c	; 0x185c <DcMotor_Init>

	while (1) {
		/*the received command from HMI_ECU*/
		g_receivedByte = UART_receiveByte();
    1112:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <UART_receiveByte>
    1116:	80 93 7d 00 	sts	0x007D, r24

		/*if the user wants to create password or change password for the first time*/
		if (g_receivedByte == CHANGE_PASSWORD || g_receivedByte == PASSWORD_1) {
    111a:	80 91 7d 00 	lds	r24, 0x007D
    111e:	8d 32       	cpi	r24, 0x2D	; 45
    1120:	21 f0       	breq	.+8      	; 0x112a <main+0xa2>
    1122:	80 91 7d 00 	lds	r24, 0x007D
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	19 f4       	brne	.+6      	; 0x1130 <main+0xa8>
			storePassword();
    112a:	0e 94 a3 05 	call	0xb46	; 0xb46 <storePassword>
    112e:	f1 cf       	rjmp	.-30     	; 0x1112 <main+0x8a>
		}
		/*
		 * if the user is re-entering(when changing or creating it) the password
		 * or wants to open the door
		 */
		else if (g_receivedByte == PASSWORD_2) {
    1130:	80 91 7d 00 	lds	r24, 0x007D
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	19 f4       	brne	.+6      	; 0x113e <main+0xb6>
			verifyPassword();
    1138:	0e 94 2e 07 	call	0xe5c	; 0xe5c <verifyPassword>
    113c:	ea cf       	rjmp	.-44     	; 0x1112 <main+0x8a>

		/*
		 * if the received command is open door
		 * start the de-motor
		 */
		else if (g_receivedByte == OPEN_DOOR) {
    113e:	80 91 7d 00 	lds	r24, 0x007D
    1142:	8b 32       	cpi	r24, 0x2B	; 43
    1144:	19 f4       	brne	.+6      	; 0x114c <main+0xc4>
			operateMotor();
    1146:	0e 94 ee 07 	call	0xfdc	; 0xfdc <operateMotor>
    114a:	e3 cf       	rjmp	.-58     	; 0x1112 <main+0x8a>
		/*
		 * if the received command is WRONG_PASS_3
		 * means that the user entered the password wrong for 3 times
		 * in this case turn on the buzzer
		 */
		else if (g_receivedByte == WRONG_PASS_3) {
    114c:	80 91 7d 00 	lds	r24, 0x007D
    1150:	80 32       	cpi	r24, 0x20	; 32
    1152:	f9 f6       	brne	.-66     	; 0x1112 <main+0x8a>
			operateBuzzer();
    1154:	0e 94 1f 08 	call	0x103e	; 0x103e <operateBuzzer>
    1158:	dc cf       	rjmp	.-72     	; 0x1112 <main+0x8a>

0000115a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_setupPinDirection+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <GPIO_setupPinDirection+0x8>
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	6a 83       	std	Y+2, r22	; 0x02
    116c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	08 f0       	brcs	.+2      	; 0x1176 <GPIO_setupPinDirection+0x1c>
    1174:	d5 c0       	rjmp	.+426    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	08 f0       	brcs	.+2      	; 0x117e <GPIO_setupPinDirection+0x24>
    117c:	d1 c0       	rjmp	.+418    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3d 83       	std	Y+5, r19	; 0x05
    1186:	2c 83       	std	Y+4, r18	; 0x04
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <GPIO_setupPinDirection+0x3a>
    1192:	43 c0       	rjmp	.+134    	; 0x121a <GPIO_setupPinDirection+0xc0>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <GPIO_setupPinDirection+0x4e>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <GPIO_setupPinDirection+0x68>
    11a6:	bc c0       	rjmp	.+376    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
    11a8:	2c 81       	ldd	r18, Y+4	; 0x04
    11aa:	3d 81       	ldd	r19, Y+5	; 0x05
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <GPIO_setupPinDirection+0x5a>
    11b2:	5f c0       	rjmp	.+190    	; 0x1272 <GPIO_setupPinDirection+0x118>
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <GPIO_setupPinDirection+0x66>
    11be:	85 c0       	rjmp	.+266    	; 0x12ca <GPIO_setupPinDirection+0x170>
    11c0:	af c0       	rjmp	.+350    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	a1 f4       	brne	.+40     	; 0x11f0 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    11c8:	aa e3       	ldi	r26, 0x3A	; 58
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ea e3       	ldi	r30, 0x3A	; 58
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_setupPinDirection+0x8c>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_setupPinDirection+0x88>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	98 c0       	rjmp	.+304    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_setupPinDirection+0xb4>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_setupPinDirection+0xb0>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	83 c0       	rjmp	.+262    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	a1 f4       	brne	.+40     	; 0x1248 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    1220:	a7 e3       	ldi	r26, 0x37	; 55
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e7 e3       	ldi	r30, 0x37	; 55
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_setupPinDirection+0xe4>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_setupPinDirection+0xe0>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	6c c0       	rjmp	.+216    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    1248:	a7 e3       	ldi	r26, 0x37	; 55
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e7 e3       	ldi	r30, 0x37	; 55
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_setupPinDirection+0x10c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_setupPinDirection+0x108>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	57 c0       	rjmp	.+174    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	a1 f4       	brne	.+40     	; 0x12a0 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    1278:	a4 e3       	ldi	r26, 0x34	; 52
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e4 e3       	ldi	r30, 0x34	; 52
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_setupPinDirection+0x13c>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_setupPinDirection+0x138>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	40 c0       	rjmp	.+128    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    12a0:	a4 e3       	ldi	r26, 0x34	; 52
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e4 e3       	ldi	r30, 0x34	; 52
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_setupPinDirection+0x164>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_setupPinDirection+0x160>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	2b c0       	rjmp	.+86     	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	a1 f4       	brne	.+40     	; 0x12f8 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    12d0:	a1 e3       	ldi	r26, 0x31	; 49
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e1 e3       	ldi	r30, 0x31	; 49
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_setupPinDirection+0x194>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_setupPinDirection+0x190>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    12f8:	a1 e3       	ldi	r26, 0x31	; 49
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e3       	ldi	r30, 0x31	; 49
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_setupPinDirection+0x1bc>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_setupPinDirection+0x1b8>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_writePin+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <GPIO_writePin+0x8>
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	6a 83       	std	Y+2, r22	; 0x02
    1342:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <GPIO_writePin+0x1c>
    134a:	d5 c0       	rjmp	.+426    	; 0x14f6 <GPIO_writePin+0x1c6>
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	08 f0       	brcs	.+2      	; 0x1354 <GPIO_writePin+0x24>
    1352:	d1 c0       	rjmp	.+418    	; 0x14f6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* Write the pin value as required */
		switch (port_num) {
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3d 83       	std	Y+5, r19	; 0x05
    135c:	2c 83       	std	Y+4, r18	; 0x04
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <GPIO_writePin+0x3a>
    1368:	43 c0       	rjmp	.+134    	; 0x13f0 <GPIO_writePin+0xc0>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <GPIO_writePin+0x4e>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	71 f0       	breq	.+28     	; 0x1398 <GPIO_writePin+0x68>
    137c:	bc c0       	rjmp	.+376    	; 0x14f6 <GPIO_writePin+0x1c6>
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	3d 81       	ldd	r19, Y+5	; 0x05
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <GPIO_writePin+0x5a>
    1388:	5f c0       	rjmp	.+190    	; 0x1448 <GPIO_writePin+0x118>
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <GPIO_writePin+0x66>
    1394:	85 c0       	rjmp	.+266    	; 0x14a0 <GPIO_writePin+0x170>
    1396:	af c0       	rjmp	.+350    	; 0x14f6 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    139e:	ab e3       	ldi	r26, 0x3B	; 59
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_writePin+0x8c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_writePin+0x88>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	98 c0       	rjmp	.+304    	; 0x14f6 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_writePin+0xb4>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_writePin+0xb0>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	83 c0       	rjmp	.+262    	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	a1 f4       	brne	.+40     	; 0x141e <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    13f6:	a8 e3       	ldi	r26, 0x38	; 56
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e3       	ldi	r30, 0x38	; 56
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_writePin+0xe4>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_writePin+0xe0>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	6c c0       	rjmp	.+216    	; 0x14f6 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    141e:	a8 e3       	ldi	r26, 0x38	; 56
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e8 e3       	ldi	r30, 0x38	; 56
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_writePin+0x10c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_writePin+0x108>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	57 c0       	rjmp	.+174    	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	a1 f4       	brne	.+40     	; 0x1476 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    144e:	a5 e3       	ldi	r26, 0x35	; 53
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e5 e3       	ldi	r30, 0x35	; 53
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_writePin+0x13c>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_writePin+0x138>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	40 c0       	rjmp	.+128    	; 0x14f6 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    1476:	a5 e3       	ldi	r26, 0x35	; 53
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e3       	ldi	r30, 0x35	; 53
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_writePin+0x164>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_writePin+0x160>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	2b c0       	rjmp	.+86     	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a1 f4       	brne	.+40     	; 0x14ce <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    14a6:	a2 e3       	ldi	r26, 0x32	; 50
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_writePin+0x194>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_writePin+0x190>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    14ce:	a2 e3       	ldi	r26, 0x32	; 50
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e2 e3       	ldi	r30, 0x32	; 50
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_writePin+0x1bc>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_writePin+0x1b8>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_readPin+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <GPIO_readPin+0x8>
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	8a 83       	std	Y+2, r24	; 0x02
    1516:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1518:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 30       	cpi	r24, 0x08	; 8
    151e:	08 f0       	brcs	.+2      	; 0x1522 <GPIO_readPin+0x1c>
    1520:	84 c0       	rjmp	.+264    	; 0x162a <GPIO_readPin+0x124>
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	08 f0       	brcs	.+2      	; 0x152a <GPIO_readPin+0x24>
    1528:	80 c0       	rjmp	.+256    	; 0x162a <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* Read the pin value as required */
		switch (port_num) {
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3d 83       	std	Y+5, r19	; 0x05
    1532:	2c 83       	std	Y+4, r18	; 0x04
    1534:	4c 81       	ldd	r20, Y+4	; 0x04
    1536:	5d 81       	ldd	r21, Y+5	; 0x05
    1538:	41 30       	cpi	r20, 0x01	; 1
    153a:	51 05       	cpc	r21, r1
    153c:	79 f1       	breq	.+94     	; 0x159c <GPIO_readPin+0x96>
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	34 f4       	brge	.+12     	; 0x1554 <GPIO_readPin+0x4e>
    1548:	2c 81       	ldd	r18, Y+4	; 0x04
    154a:	3d 81       	ldd	r19, Y+5	; 0x05
    154c:	21 15       	cp	r18, r1
    154e:	31 05       	cpc	r19, r1
    1550:	69 f0       	breq	.+26     	; 0x156c <GPIO_readPin+0x66>
    1552:	6b c0       	rjmp	.+214    	; 0x162a <GPIO_readPin+0x124>
    1554:	4c 81       	ldd	r20, Y+4	; 0x04
    1556:	5d 81       	ldd	r21, Y+5	; 0x05
    1558:	42 30       	cpi	r20, 0x02	; 2
    155a:	51 05       	cpc	r21, r1
    155c:	b9 f1       	breq	.+110    	; 0x15cc <GPIO_readPin+0xc6>
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <GPIO_readPin+0x64>
    1568:	49 c0       	rjmp	.+146    	; 0x15fc <GPIO_readPin+0xf6>
    156a:	5f c0       	rjmp	.+190    	; 0x162a <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    156c:	e9 e3       	ldi	r30, 0x39	; 57
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_readPin+0x7e>
    1580:	55 95       	asr	r21
    1582:	47 95       	ror	r20
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_readPin+0x7a>
    1588:	ca 01       	movw	r24, r20
    158a:	81 70       	andi	r24, 0x01	; 1
    158c:	90 70       	andi	r25, 0x00	; 0
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	49 c0       	rjmp	.+146    	; 0x162a <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1598:	19 82       	std	Y+1, r1	; 0x01
    159a:	47 c0       	rjmp	.+142    	; 0x162a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    159c:	e6 e3       	ldi	r30, 0x36	; 54
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_readPin+0xae>
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_readPin+0xaa>
    15b8:	ca 01       	movw	r24, r20
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	88 23       	and	r24, r24
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	31 c0       	rjmp	.+98     	; 0x162a <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	2f c0       	rjmp	.+94     	; 0x162a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    15cc:	e3 e3       	ldi	r30, 0x33	; 51
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_readPin+0xde>
    15e0:	55 95       	asr	r21
    15e2:	47 95       	ror	r20
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_readPin+0xda>
    15e8:	ca 01       	movw	r24, r20
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	88 23       	and	r24, r24
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	19 c0       	rjmp	.+50     	; 0x162a <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    15f8:	19 82       	std	Y+1, r1	; 0x01
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    15fc:	e0 e3       	ldi	r30, 0x30	; 48
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_readPin+0x10e>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_readPin+0x10a>
    1618:	ca 01       	movw	r24, r20
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	90 70       	andi	r25, 0x00	; 0
    161e:	88 23       	and	r24, r24
    1620:	19 f0       	breq	.+6      	; 0x1628 <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	01 c0       	rjmp	.+2      	; 0x162a <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1628:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	00 d0       	rcall	.+0      	; 0x1642 <GPIO_setupPortDirection+0x6>
    1642:	00 d0       	rcall	.+0      	; 0x1644 <GPIO_setupPortDirection+0x8>
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	90 f5       	brcc	.+100    	; 0x16b6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3c 83       	std	Y+4, r19	; 0x04
    165a:	2b 83       	std	Y+3, r18	; 0x03
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	d1 f0       	breq	.+52     	; 0x169a <GPIO_setupPortDirection+0x5e>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	2c f4       	brge	.+10     	; 0x167a <GPIO_setupPortDirection+0x3e>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	61 f0       	breq	.+24     	; 0x1690 <GPIO_setupPortDirection+0x54>
    1678:	1e c0       	rjmp	.+60     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	81 f0       	breq	.+32     	; 0x16a4 <GPIO_setupPortDirection+0x68>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	91 05       	cpc	r25, r1
    168c:	81 f0       	breq	.+32     	; 0x16ae <GPIO_setupPortDirection+0x72>
    168e:	13 c0       	rjmp	.+38     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1690:	ea e3       	ldi	r30, 0x3A	; 58
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	0e c0       	rjmp	.+28     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    169a:	e7 e3       	ldi	r30, 0x37	; 55
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16a4:	e4 e3       	ldi	r30, 0x34	; 52
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	80 83       	st	Z, r24
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	80 83       	st	Z, r24
			break;
		}
	}
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <GPIO_writePort+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <GPIO_writePort+0x8>
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	90 f5       	brcc	.+100    	; 0x173e <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (port_num) {
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3c 83       	std	Y+4, r19	; 0x04
    16e2:	2b 83       	std	Y+3, r18	; 0x03
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	d1 f0       	breq	.+52     	; 0x1722 <GPIO_writePort+0x5e>
    16ee:	2b 81       	ldd	r18, Y+3	; 0x03
    16f0:	3c 81       	ldd	r19, Y+4	; 0x04
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	2c f4       	brge	.+10     	; 0x1702 <GPIO_writePort+0x3e>
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	61 f0       	breq	.+24     	; 0x1718 <GPIO_writePort+0x54>
    1700:	1e c0       	rjmp	.+60     	; 0x173e <GPIO_writePort+0x7a>
    1702:	2b 81       	ldd	r18, Y+3	; 0x03
    1704:	3c 81       	ldd	r19, Y+4	; 0x04
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	81 f0       	breq	.+32     	; 0x172c <GPIO_writePort+0x68>
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	81 f0       	breq	.+32     	; 0x1736 <GPIO_writePort+0x72>
    1716:	13 c0       	rjmp	.+38     	; 0x173e <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1718:	eb e3       	ldi	r30, 0x3B	; 59
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	80 83       	st	Z, r24
    1720:	0e c0       	rjmp	.+28     	; 0x173e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1722:	e8 e3       	ldi	r30, 0x38	; 56
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	80 83       	st	Z, r24
    172a:	09 c0       	rjmp	.+18     	; 0x173e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    172c:	e5 e3       	ldi	r30, 0x35	; 53
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 83       	st	Z, r24
    1734:	04 c0       	rjmp	.+8      	; 0x173e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	80 83       	st	Z, r24
			break;
		}
	}
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <GPIO_readPort+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <GPIO_readPort+0x8>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    175a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	90 f5       	brcc	.+100    	; 0x17c6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* Read the port value as required */
		switch (port_num) {
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3c 83       	std	Y+4, r19	; 0x04
    176a:	2b 83       	std	Y+3, r18	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	d1 f0       	breq	.+52     	; 0x17aa <GPIO_readPort+0x5e>
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	2c f4       	brge	.+10     	; 0x178a <GPIO_readPort+0x3e>
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	61 f0       	breq	.+24     	; 0x17a0 <GPIO_readPort+0x54>
    1788:	1e c0       	rjmp	.+60     	; 0x17c6 <GPIO_readPort+0x7a>
    178a:	2b 81       	ldd	r18, Y+3	; 0x03
    178c:	3c 81       	ldd	r19, Y+4	; 0x04
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	81 f0       	breq	.+32     	; 0x17b4 <GPIO_readPort+0x68>
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	81 f0       	breq	.+32     	; 0x17be <GPIO_readPort+0x72>
    179e:	13 c0       	rjmp	.+38     	; 0x17c6 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    17a0:	e9 e3       	ldi	r30, 0x39	; 57
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	0e c0       	rjmp	.+28     	; 0x17c6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17aa:	e6 e3       	ldi	r30, 0x36	; 54
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17b4:	e3 e3       	ldi	r30, 0x33	; 51
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17be:	e0 e3       	ldi	r30, 0x30	; 48
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <PWM_Timer0_Start>:
/*Description:
 *  Set timer0 with PWM mode and timer0 prescaler.
 * 	Set up pin 3 in port B.
 * 	set OCR0 value with the required duty cycle.
 */
void PWM_Timer0_Start(uint8 duty_cycle) {
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	0f 92       	push	r0
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_HIGH); // set up pin as output.
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	63 e0       	ldi	r22, 0x03	; 3
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
	TCNT0 = 0; // Reset timer0 counter register.
    17ec:	e2 e5       	ldi	r30, 0x52	; 82
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	10 82       	st	Z, r1
	OCR0 = duty_cycle; // Set the required duty cycle value.
    17f2:	ec e5       	ldi	r30, 0x5C	; 92
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	80 83       	st	Z, r24
	TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS01); // Set up PWM mode and prescaler 8.
    17fa:	e3 e5       	ldi	r30, 0x53	; 83
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a e6       	ldi	r24, 0x6A	; 106
    1800:	80 83       	st	Z, r24
}
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <Buzzer_init>:
 *
 *******************************************************************************/

#include "buzzer.h"

void Buzzer_init(){
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	/*
	 * set up pin direction of the buzzer
	 * set it off initially
	*/
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	64 e0       	ldi	r22, 0x04	; 4
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	64 e0       	ldi	r22, 0x04	; 4
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>

}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <Buzzer_on>:
void Buzzer_on(void){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the Buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	64 e0       	ldi	r22, 0x04	; 4
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <Buzzer_off>:
void Buzzer_off(void){
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the Buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	64 e0       	ldi	r22, 0x04	; 4
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>

}
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <DcMotor_Init>:
#include "dc-motor.h"
/*Description:
 *  Set up DC motor input pins (output pins for the microcontroller).
 *  Make the DC motor OFF initially.
 */
void DcMotor_Init(void) {
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_IN1_PIN, PIN_OUTPUT);
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_IN2_PIN, PIN_OUTPUT);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_setupPinDirection>

	/*DC motor initial state is OFF*/
	GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_LOW);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_LOW);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>

}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <DcMotor_Rotate>:

/*Description:
 *  Configure DC motor state.
 *  Call PWM function with the required duty cycle.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed) {
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <DcMotor_Rotate+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <DcMotor_Rotate+0x8>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3c 83       	std	Y+4, r19	; 0x04
    18aa:	2b 83       	std	Y+3, r18	; 0x03
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	91 05       	cpc	r25, r1
    18b4:	a1 f0       	breq	.+40     	; 0x18de <DcMotor_Rotate+0x4c>
    18b6:	2b 81       	ldd	r18, Y+3	; 0x03
    18b8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	d1 f0       	breq	.+52     	; 0x18f4 <DcMotor_Rotate+0x62>
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	01 f5       	brne	.+64     	; 0x1908 <DcMotor_Rotate+0x76>
	case OFF:
		GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_LOW);
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_LOW);
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    18dc:	15 c0       	rjmp	.+42     	; 0x1908 <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_HIGH);
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_LOW);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    18f2:	0a c0       	rjmp	.+20     	; 0x1908 <DcMotor_Rotate+0x76>
		break;
	case ACW:
		GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_LOW);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_HIGH);
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		break;
	}


	/*call function PWM_Timer0_Start(uint8 duty_cycle) with the required duty cycle*/
	PWM_Timer0_Start(speed * 255 / 100);
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	48 2f       	mov	r20, r24
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	ca 01       	movw	r24, r20
    1910:	9c 01       	movw	r18, r24
    1912:	22 0f       	add	r18, r18
    1914:	33 1f       	adc	r19, r19
    1916:	c9 01       	movw	r24, r18
    1918:	96 95       	lsr	r25
    191a:	98 2f       	mov	r25, r24
    191c:	88 27       	eor	r24, r24
    191e:	97 95       	ror	r25
    1920:	87 95       	ror	r24
    1922:	82 1b       	sub	r24, r18
    1924:	93 0b       	sbc	r25, r19
    1926:	84 0f       	add	r24, r20
    1928:	95 1f       	adc	r25, r21
    192a:	24 e6       	ldi	r18, 0x64	; 100
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodhi4>
    1934:	cb 01       	movw	r24, r22
    1936:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <PWM_Timer0_Start>
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <EEPROM_writeByte>:
 *
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 address,uint8 data){
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <EEPROM_writeByte+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <EEPROM_writeByte+0x8>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	6b 83       	std	Y+3, r22	; 0x03
	/*send the start bit*/
	TWI_start();
    195a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <TWI_start>

	/*if the status is wrong stop the program*/
	if(TWI_getStatus()!=TWI_START)
    195e:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	11 f0       	breq	.+4      	; 0x196a <EEPROM_writeByte+0x22>
		return ERROR;
    1966:	1c 82       	std	Y+4, r1	; 0x04
    1968:	28 c0       	rjmp	.+80     	; 0x19ba <EEPROM_writeByte+0x72>

	/*send the memory address, the most significant 4 bits in the EEPROM are fixed = 1010*/
	TWI_writeByte((uint8)(0xA0 | ((address&0x0700)>>7)));
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	80 70       	andi	r24, 0x00	; 0
    1970:	97 70       	andi	r25, 0x07	; 7
    1972:	88 0f       	add	r24, r24
    1974:	89 2f       	mov	r24, r25
    1976:	88 1f       	adc	r24, r24
    1978:	99 0b       	sbc	r25, r25
    197a:	91 95       	neg	r25
    197c:	80 6a       	ori	r24, 0xA0	; 160
    197e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_SLA_W_ACK)
    1982:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1986:	88 31       	cpi	r24, 0x18	; 24
    1988:	11 f0       	breq	.+4      	; 0x198e <EEPROM_writeByte+0x46>
		return ERROR;
    198a:	1c 82       	std	Y+4, r1	; 0x04
    198c:	16 c0       	rjmp	.+44     	; 0x19ba <EEPROM_writeByte+0x72>
	/*Send the least significant 8 bits of the EEPROM address.*/
	TWI_writeByte((uint8)address); // casted to uint8
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_DATA_ACK)
    1994:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1998:	88 32       	cpi	r24, 0x28	; 40
    199a:	11 f0       	breq	.+4      	; 0x19a0 <EEPROM_writeByte+0x58>
		return ERROR;
    199c:	1c 82       	std	Y+4, r1	; 0x04
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <EEPROM_writeByte+0x72>

	/*Send the data to be stored in that address*/
	TWI_writeByte(data);
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_DATA_ACK)
    19a6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    19aa:	88 32       	cpi	r24, 0x28	; 40
    19ac:	11 f0       	breq	.+4      	; 0x19b2 <EEPROM_writeByte+0x6a>
		return ERROR;
    19ae:	1c 82       	std	Y+4, r1	; 0x04
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <EEPROM_writeByte+0x72>

	TWI_STOP();
    19b2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <TWI_STOP>
	return SUCCESS;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	8c 83       	std	Y+4, r24	; 0x04
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 address,uint8 *data){
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <EEPROM_readByte+0x6>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <EEPROM_readByte+0x8>
    19d2:	0f 92       	push	r0
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	7c 83       	std	Y+4, r23	; 0x04
    19de:	6b 83       	std	Y+3, r22	; 0x03
	/*send the start bit*/
	TWI_start();
    19e0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <TWI_start>

	/*if the status is wrong stop the program*/
	if (TWI_getStatus() != TWI_START)
    19e4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	11 f0       	breq	.+4      	; 0x19f0 <EEPROM_readByte+0x26>
		return ERROR;
    19ec:	1d 82       	std	Y+5, r1	; 0x05
    19ee:	44 c0       	rjmp	.+136    	; 0x1a78 <EEPROM_readByte+0xae>

	/*
	 * send the memory address, the most significant 4 bits in the EEPROM are fixed = 1010.
	 * R/W=0 (write).
	*/
	TWI_writeByte((uint8) (0xA0 | ((address & 0x0700) >> 7)));
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	80 70       	andi	r24, 0x00	; 0
    19f6:	97 70       	andi	r25, 0x07	; 7
    19f8:	88 0f       	add	r24, r24
    19fa:	89 2f       	mov	r24, r25
    19fc:	88 1f       	adc	r24, r24
    19fe:	99 0b       	sbc	r25, r25
    1a00:	91 95       	neg	r25
    1a02:	80 6a       	ori	r24, 0xA0	; 160
    1a04:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a08:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1a0c:	88 31       	cpi	r24, 0x18	; 24
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <EEPROM_readByte+0x4a>
		return ERROR;
    1a10:	1d 82       	std	Y+5, r1	; 0x05
    1a12:	32 c0       	rjmp	.+100    	; 0x1a78 <EEPROM_readByte+0xae>

	/*Send the least significant 8 bits of the EEPROM address.*/
	TWI_writeByte((uint8)address); // casted to uint8
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a1a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1a1e:	88 32       	cpi	r24, 0x28	; 40
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <EEPROM_readByte+0x5c>
		return ERROR;
    1a22:	1d 82       	std	Y+5, r1	; 0x05
    1a24:	29 c0       	rjmp	.+82     	; 0x1a78 <EEPROM_readByte+0xae>


	/*send the repeated start bit */
	TWI_start();
    1a26:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    1a2a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1a2e:	80 31       	cpi	r24, 0x10	; 16
    1a30:	11 f0       	breq	.+4      	; 0x1a36 <EEPROM_readByte+0x6c>
		return ERROR;
    1a32:	1d 82       	std	Y+5, r1	; 0x05
    1a34:	21 c0       	rjmp	.+66     	; 0x1a78 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8) ((0xA0) | ((address & 0x0700) >> 7) | 1));
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	80 70       	andi	r24, 0x00	; 0
    1a3c:	97 70       	andi	r25, 0x07	; 7
    1a3e:	88 0f       	add	r24, r24
    1a40:	89 2f       	mov	r24, r25
    1a42:	88 1f       	adc	r24, r24
    1a44:	99 0b       	sbc	r25, r25
    1a46:	91 95       	neg	r25
    1a48:	81 6a       	ori	r24, 0xA1	; 161
    1a4a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1a4e:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1a52:	80 34       	cpi	r24, 0x40	; 64
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <EEPROM_readByte+0x90>
		return ERROR;
    1a56:	1d 82       	std	Y+5, r1	; 0x05
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*data = TWI_readByteWithNACK();
    1a5a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <TWI_readByteWithNACK>
    1a5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a60:	fc 81       	ldd	r31, Y+4	; 0x04
    1a62:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1a64:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <TWI_getStatus>
    1a68:	88 35       	cpi	r24, 0x58	; 88
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <EEPROM_readByte+0xa6>
		return ERROR;
    1a6c:	1d 82       	std	Y+5, r1	; 0x05
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_STOP();
    1a70:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <TWI_STOP>

	return SUCCESS;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <TWI_init>:
 *******************************************************************************/
#include "i2c.h"
#include <avr/io.h>
#include "common_macros.h"

void TWI_init(const TWI_ConfigType *Config_Ptr) {
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <TWI_init+0x6>
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Bit Rate: is set using zero pre-scaler TWPS=00 and F_CPU=8Mhz
	 * SCL frequency = F_CPU/(16+2(TWBR)*4^TWPS)
	 */
	TWBR = Config_Ptr->bit_rate;
    1a98:	a0 e2       	ldi	r26, 0x20	; 32
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa0:	81 81       	ldd	r24, Z+1	; 0x01
    1aa2:	8c 93       	st	X, r24
	TWSR = 0x00;
    1aa4:	e1 e2       	ldi	r30, 0x21	; 33
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	10 82       	st	Z, r1
	/*set this MC address to the specified if any master wants to communicate with it*/
	TWAR = Config_Ptr->address;
    1aaa:	a2 e2       	ldi	r26, 0x22	; 34
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8c 93       	st	X, r24
	/*enable the TWI*/
	TWCR = (1 << TWEN);
    1ab6:	e6 e5       	ldi	r30, 0x56	; 86
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	84 e0       	ldi	r24, 0x04	; 4
    1abc:	80 83       	st	Z, r24
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <TWI_start>:

void TWI_start() {
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit before starting.
	 * Set TWSTA bit to send start condition.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ad0:	e6 e5       	ldi	r30, 0x56	; 86
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	84 ea       	ldi	r24, 0xA4	; 164
    1ad6:	80 83       	st	Z, r24
	/*Wait until the start bit is sent (until SWINT bit is set)*/
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1ad8:	e6 e5       	ldi	r30, 0x56	; 86
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	88 23       	and	r24, r24
    1ae0:	dc f7       	brge	.-10     	; 0x1ad8 <TWI_start+0x10>
		;
}
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <TWI_STOP>:

void TWI_STOP() {
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit before stopping.
	 * Set TWSTO bit to send stop condition.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1af0:	e6 e5       	ldi	r30, 0x56	; 86
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	84 e9       	ldi	r24, 0x94	; 148
    1af6:	80 83       	st	Z, r24
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <TWI_writeByte>:

void TWI_writeByte(uint8 data) {
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01
	while (!(TWCR & (1 << TWINT)))
    1b0a:	e6 e5       	ldi	r30, 0x56	; 86
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 23       	and	r24, r24
    1b12:	dc f7       	brge	.-10     	; 0x1b0a <TWI_writeByte+0xc>
		;
	/*Put the data in the TWI data register*/
	TWDR = data;
    1b14:	e3 e2       	ldi	r30, 0x23	; 35
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	80 83       	st	Z, r24
	/*Clear the TWINT bit and enable TWI module*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    1b1c:	e6 e5       	ldi	r30, 0x56	; 86
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	84 e8       	ldi	r24, 0x84	; 132
    1b22:	80 83       	st	Z, r24
	/*Wait until TWINT bit is high (data is sent successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1b24:	e6 e5       	ldi	r30, 0x56	; 86
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 23       	and	r24, r24
    1b2c:	dc f7       	brge	.-10     	; 0x1b24 <TWI_writeByte+0x26>
		;
}
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK() {
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit.
	 * Set TWEA bit to send ACK after receiving data.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b3e:	e6 e5       	ldi	r30, 0x56	; 86
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	84 ec       	ldi	r24, 0xC4	; 196
    1b44:	80 83       	st	Z, r24
	/*Wait until TWINT bit is high (data is received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1b46:	e6 e5       	ldi	r30, 0x56	; 86
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 23       	and	r24, r24
    1b4e:	dc f7       	brge	.-10     	; 0x1b46 <TWI_readByteWithACK+0x10>
		;
	return TWDR;
    1b50:	e3 e2       	ldi	r30, 0x23	; 35
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
}
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK() {
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit.
	 * clear TWEA bit to send NACK after receiving data.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1b64:	e6 e5       	ldi	r30, 0x56	; 86
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	84 e8       	ldi	r24, 0x84	; 132
    1b6a:	80 83       	st	Z, r24
	/*Wait until TWINT bit is high (data is received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1b6c:	e6 e5       	ldi	r30, 0x56	; 86
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	88 23       	and	r24, r24
    1b74:	dc f7       	brge	.-10     	; 0x1b6c <TWI_readByteWithNACK+0x10>
		;
	return TWDR;
    1b76:	e3 e2       	ldi	r30, 0x23	; 35
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
}
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <TWI_getStatus>:
uint8 TWI_getStatus() {
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	/*Get the last 5 bits in the status register*/
	return TWSR & 0xF8;
    1b8a:	e1 e2       	ldi	r30, 0x21	; 33
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	88 7f       	andi	r24, 0xF8	; 248
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <__vector_9>:

/*
 * Timer1 is used to count minutes in overflow mode.
 * after one minute(32 overflows) in normal mode call the call back function
 */
ISR(TIMER1_OVF_vect) {
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	3f 93       	push	r19
    1ba6:	4f 93       	push	r20
    1ba8:	5f 93       	push	r21
    1baa:	6f 93       	push	r22
    1bac:	7f 93       	push	r23
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	af 93       	push	r26
    1bb4:	bf 93       	push	r27
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    1bc2:	80 91 75 00 	lds	r24, 0x0075
    1bc6:	90 91 76 00 	lds	r25, 0x0076
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	29 f0       	breq	.+10     	; 0x1bd8 <__vector_9+0x40>
		g_callBackPtr();
    1bce:	e0 91 75 00 	lds	r30, 0x0075
    1bd2:	f0 91 76 00 	lds	r31, 0x0076
    1bd6:	09 95       	icall

}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <__vector_7>:
/*
 * Timer1 is used to count seconds in CTC mode.
 * ORCR1A = TICKS_PER_ONE_SECOND
 */
ISR(TIMER1_COMPA_vect){
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr!=NULL_PTR)
    1c28:	80 91 75 00 	lds	r24, 0x0075
    1c2c:	90 91 76 00 	lds	r25, 0x0076
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <__vector_7+0x40>
		g_callBackPtr();
    1c34:	e0 91 75 00 	lds	r30, 0x0075
    1c38:	f0 91 76 00 	lds	r31, 0x0076
    1c3c:	09 95       	icall
}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <Timer1_init+0x6>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    1c72:	ac e4       	ldi	r26, 0x4C	; 76
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e9 81       	ldd	r30, Y+1	; 0x01
    1c78:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	9c 93       	st	X, r25
    1c82:	8e 93       	st	-X, r24
	if (Config_Ptr->mode == normal_mode){
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	85 81       	ldd	r24, Z+5	; 0x05
    1c8a:	88 23       	and	r24, r24
    1c8c:	39 f4       	brne	.+14     	; 0x1c9c <Timer1_init+0x38>
		TIMSK |= (1<<TOIE1);
    1c8e:	a9 e5       	ldi	r26, 0x59	; 89
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e9 e5       	ldi	r30, 0x59	; 89
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	84 60       	ori	r24, 0x04	; 4
    1c9a:	8c 93       	st	X, r24
	}
	/*compare value is only used in compare mode*/
	if (Config_Ptr->mode == CTC_mode){
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	85 81       	ldd	r24, Z+5	; 0x05
    1ca2:	84 30       	cpi	r24, 0x04	; 4
    1ca4:	81 f4       	brne	.+32     	; 0x1cc6 <Timer1_init+0x62>
		OCR1A = Config_Ptr->compare_value;
    1ca6:	aa e4       	ldi	r26, 0x4A	; 74
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	11 96       	adiw	r26, 0x01	; 1
    1cb4:	9c 93       	st	X, r25
    1cb6:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    1cb8:	a9 e5       	ldi	r26, 0x59	; 89
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e9 e5       	ldi	r30, 0x59	; 89
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 61       	ori	r24, 0x10	; 16
    1cc4:	8c 93       	st	X, r24
	}
	/*
	 * set the pre-scaler value.
	 * set WGM12 value.
	 * */
	TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode<<1)&0x08);
    1cc6:	ae e4       	ldi	r26, 0x4E	; 78
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cce:	84 81       	ldd	r24, Z+4	; 0x04
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	85 81       	ldd	r24, Z+5	; 0x05
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	88 70       	andi	r24, 0x08	; 8
    1ce2:	82 2b       	or	r24, r18
    1ce4:	8c 93       	st	X, r24
	/*set WGM10 and WGM11 values.*/
	TCCR1A =  (1<<FOC1A) | (1<<FOC1B) |(1<<COM1A1) ;
    1ce6:	ef e4       	ldi	r30, 0x4F	; 79
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	8c e8       	ldi	r24, 0x8C	; 140
    1cec:	80 83       	st	Z, r24

}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <Timer1_setCallBack+0x6>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	90 93 76 00 	sts	0x0076, r25
    1d0e:	80 93 75 00 	sts	0x0075, r24
}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <Timer1_deInit>:


/*clear all timer1 registers to disable it*/
void Timer1_deInit(void) {
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1d24:	ec e4       	ldi	r30, 0x4C	; 76
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	11 82       	std	Z+1, r1	; 0x01
    1d2a:	10 82       	st	Z, r1
	OCR1A = 0;
    1d2c:	ea e4       	ldi	r30, 0x4A	; 74
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	11 82       	std	Z+1, r1	; 0x01
    1d32:	10 82       	st	Z, r1
	TCCR1B = 0;
    1d34:	ee e4       	ldi	r30, 0x4E	; 78
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	10 82       	st	Z, r1
	TCCR1A = 0;
    1d3a:	ef e4       	ldi	r30, 0x4F	; 79
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	10 82       	st	Z, r1
}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <UART_init>:
 *******************************************************************************/
#include "uart.h"
#include "common_macros.h"
#include <avr/io.h>

void UART_init(UART_ConfigType * config_ptr){
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <UART_init+0x6>
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <UART_init+0x8>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = (1<<U2X);
    1d56:	eb e2       	ldi	r30, 0x2B	; 43
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	80 83       	st	Z, r24
	UCSRB = (1<<TXEN) | (1<<RXEN)  | (config_ptr->bit_data&0x04);
    1d5e:	aa e2       	ldi	r26, 0x2A	; 42
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	eb 81       	ldd	r30, Y+3	; 0x03
    1d64:	fc 81       	ldd	r31, Y+4	; 0x04
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	84 70       	andi	r24, 0x04	; 4
    1d6a:	88 61       	ori	r24, 0x18	; 24
    1d6c:	8c 93       	st	X, r24
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) |(config_ptr->stop_bit<<3) | ((config_ptr->parity&0x03)<<4) | ((config_ptr->bit_data&0x03)<<1);
    1d6e:	a0 e4       	ldi	r26, 0x40	; 64
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	84 81       	ldd	r24, Z+4	; 0x04
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	28 2f       	mov	r18, r24
    1d8a:	26 68       	ori	r18, 0x86	; 134
    1d8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d90:	83 81       	ldd	r24, Z+3	; 0x03
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	83 70       	andi	r24, 0x03	; 3
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	82 95       	swap	r24
    1d9c:	92 95       	swap	r25
    1d9e:	90 7f       	andi	r25, 0xF0	; 240
    1da0:	98 27       	eor	r25, r24
    1da2:	80 7f       	andi	r24, 0xF0	; 240
    1da4:	98 27       	eor	r25, r24
    1da6:	28 2b       	or	r18, r24
    1da8:	eb 81       	ldd	r30, Y+3	; 0x03
    1daa:	fc 81       	ldd	r31, Y+4	; 0x04
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	83 70       	andi	r24, 0x03	; 3
    1db4:	90 70       	andi	r25, 0x00	; 0
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	82 2b       	or	r24, r18
    1dbc:	8c 93       	st	X, r24
	uint16 ubrr_val = (uint16)((F_CPU/(8UL*config_ptr->baud_rate))-1);
    1dbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	cc 01       	movw	r24, r24
    1dc8:	a0 e0       	ldi	r26, 0x00	; 0
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	aa 1f       	adc	r26, r26
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	aa 1f       	adc	r26, r26
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	aa 1f       	adc	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	9c 01       	movw	r18, r24
    1de6:	ad 01       	movw	r20, r26
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	92 e1       	ldi	r25, 0x12	; 18
    1dec:	aa e7       	ldi	r26, 0x7A	; 122
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__udivmodsi4>
    1df8:	da 01       	movw	r26, r20
    1dfa:	c9 01       	movw	r24, r18
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_val>>8;
    1e02:	e0 e4       	ldi	r30, 0x40	; 64
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	89 2f       	mov	r24, r25
    1e0c:	99 27       	eor	r25, r25
    1e0e:	80 83       	st	Z, r24
	UBRRL = ubrr_val;
    1e10:	e9 e2       	ldi	r30, 0x29	; 41
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	80 83       	st	Z, r24

}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(uint8 data){
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	0f 92       	push	r0
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	89 83       	std	Y+1, r24	; 0x01
	//wait until the last data is shifted out and the transmit buffer is ready to receive new data.
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1e32:	eb e2       	ldi	r30, 0x2B	; 43
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	80 72       	andi	r24, 0x20	; 32
    1e3e:	90 70       	andi	r25, 0x00	; 0
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	b9 f3       	breq	.-18     	; 0x1e32 <UART_sendByte+0xc>
	/*
	 * put the required data in the transmit buffer (UDR).
	 * it clears UDRE bit.
	 */
	UDR = data;
    1e44:	ec e2       	ldi	r30, 0x2C	; 44
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	80 83       	st	Z, r24
}
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <UART_receiveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void){
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
//	wait until there is a new data IS received in the receive buffer
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1e5c:	eb e2       	ldi	r30, 0x2B	; 43
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 23       	and	r24, r24
    1e64:	dc f7       	brge	.-10     	; 0x1e5c <UART_receiveByte+0x8>
	// save data, the RXC will be cleared after reading the data
	return UDR;
    1e66:	ec e2       	ldi	r30, 0x2C	; 44
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
}
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <UART_sendString+0x6>
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	9b 83       	std	Y+3, r25	; 0x03
    1e80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    1e82:	19 82       	std	Y+1, r1	; 0x01
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <UART_sendString+0x32>
	while(Str[i]!='\0'){
		// send byte by byte
		UART_sendByte(Str[i++]);
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e90:	fc 01       	movw	r30, r24
    1e92:	e2 0f       	add	r30, r18
    1e94:	f3 1f       	adc	r31, r19
    1e96:	90 81       	ld	r25, Z
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	8f 5f       	subi	r24, 0xFF	; 255
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	89 2f       	mov	r24, r25
    1ea0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <UART_sendByte>
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
	uint8 i =0;
	while(Str[i]!='\0'){
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 23       	and	r24, r24
    1eb8:	31 f7       	brne	.-52     	; 0x1e86 <UART_sendString+0x14>
		// send byte by byte
		UART_sendByte(Str[i++]);
	}
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <UART_receiveString+0xa>
    1ed0:	0f 92       	push	r0
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	9b 83       	std	Y+3, r25	; 0x03
    1ed8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eda:	19 82       	std	Y+1, r1	; 0x01
	// receive first byte
	Str[i] = UART_receiveByte();
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	8c 01       	movw	r16, r24
    1ee8:	02 0f       	add	r16, r18
    1eea:	13 1f       	adc	r17, r19
    1eec:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <UART_receiveByte>
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 83       	st	Z, r24
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <UART_receiveString+0x4e>
	// check if the received byte is not #, if true store the byte in the string
	while(Str[i]!='#'){
		i++;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	9b 81       	ldd	r25, Y+3	; 0x03
    1f06:	8c 01       	movw	r16, r24
    1f08:	02 0f       	add	r16, r18
    1f0a:	13 1f       	adc	r17, r19
    1f0c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <UART_receiveByte>
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 83       	st	Z, r24
void UART_receiveString(uint8 *Str){
	uint8 i = 0;
	// receive first byte
	Str[i] = UART_receiveByte();
	// check if the received byte is not #, if true store the byte in the string
	while(Str[i]!='#'){
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1e:	fc 01       	movw	r30, r24
    1f20:	e2 0f       	add	r30, r18
    1f22:	f3 1f       	adc	r31, r19
    1f24:	80 81       	ld	r24, Z
    1f26:	83 32       	cpi	r24, 0x23	; 35
    1f28:	31 f7       	brne	.-52     	; 0x1ef6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}
	// after receiving the string add null instead of # symbol
	Str[i] = '\0';
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	9b 81       	ldd	r25, Y+3	; 0x03
    1f34:	fc 01       	movw	r30, r24
    1f36:	e2 0f       	add	r30, r18
    1f38:	f3 1f       	adc	r31, r19
    1f3a:	10 82       	st	Z, r1
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	08 95       	ret

00001f4c <__divmodhi4>:
    1f4c:	97 fb       	bst	r25, 7
    1f4e:	09 2e       	mov	r0, r25
    1f50:	07 26       	eor	r0, r23
    1f52:	0a d0       	rcall	.+20     	; 0x1f68 <__divmodhi4_neg1>
    1f54:	77 fd       	sbrc	r23, 7
    1f56:	04 d0       	rcall	.+8      	; 0x1f60 <__divmodhi4_neg2>
    1f58:	2e d0       	rcall	.+92     	; 0x1fb6 <__udivmodhi4>
    1f5a:	06 d0       	rcall	.+12     	; 0x1f68 <__divmodhi4_neg1>
    1f5c:	00 20       	and	r0, r0
    1f5e:	1a f4       	brpl	.+6      	; 0x1f66 <__divmodhi4_exit>

00001f60 <__divmodhi4_neg2>:
    1f60:	70 95       	com	r23
    1f62:	61 95       	neg	r22
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255

00001f66 <__divmodhi4_exit>:
    1f66:	08 95       	ret

00001f68 <__divmodhi4_neg1>:
    1f68:	f6 f7       	brtc	.-4      	; 0x1f66 <__divmodhi4_exit>
    1f6a:	90 95       	com	r25
    1f6c:	81 95       	neg	r24
    1f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f70:	08 95       	ret

00001f72 <__udivmodsi4>:
    1f72:	a1 e2       	ldi	r26, 0x21	; 33
    1f74:	1a 2e       	mov	r1, r26
    1f76:	aa 1b       	sub	r26, r26
    1f78:	bb 1b       	sub	r27, r27
    1f7a:	fd 01       	movw	r30, r26
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <__udivmodsi4_ep>

00001f7e <__udivmodsi4_loop>:
    1f7e:	aa 1f       	adc	r26, r26
    1f80:	bb 1f       	adc	r27, r27
    1f82:	ee 1f       	adc	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	a2 17       	cp	r26, r18
    1f88:	b3 07       	cpc	r27, r19
    1f8a:	e4 07       	cpc	r30, r20
    1f8c:	f5 07       	cpc	r31, r21
    1f8e:	20 f0       	brcs	.+8      	; 0x1f98 <__udivmodsi4_ep>
    1f90:	a2 1b       	sub	r26, r18
    1f92:	b3 0b       	sbc	r27, r19
    1f94:	e4 0b       	sbc	r30, r20
    1f96:	f5 0b       	sbc	r31, r21

00001f98 <__udivmodsi4_ep>:
    1f98:	66 1f       	adc	r22, r22
    1f9a:	77 1f       	adc	r23, r23
    1f9c:	88 1f       	adc	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	1a 94       	dec	r1
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <__udivmodsi4_loop>
    1fa4:	60 95       	com	r22
    1fa6:	70 95       	com	r23
    1fa8:	80 95       	com	r24
    1faa:	90 95       	com	r25
    1fac:	9b 01       	movw	r18, r22
    1fae:	ac 01       	movw	r20, r24
    1fb0:	bd 01       	movw	r22, r26
    1fb2:	cf 01       	movw	r24, r30
    1fb4:	08 95       	ret

00001fb6 <__udivmodhi4>:
    1fb6:	aa 1b       	sub	r26, r26
    1fb8:	bb 1b       	sub	r27, r27
    1fba:	51 e1       	ldi	r21, 0x11	; 17
    1fbc:	07 c0       	rjmp	.+14     	; 0x1fcc <__udivmodhi4_ep>

00001fbe <__udivmodhi4_loop>:
    1fbe:	aa 1f       	adc	r26, r26
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	a6 17       	cp	r26, r22
    1fc4:	b7 07       	cpc	r27, r23
    1fc6:	10 f0       	brcs	.+4      	; 0x1fcc <__udivmodhi4_ep>
    1fc8:	a6 1b       	sub	r26, r22
    1fca:	b7 0b       	sbc	r27, r23

00001fcc <__udivmodhi4_ep>:
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	5a 95       	dec	r21
    1fd2:	a9 f7       	brne	.-22     	; 0x1fbe <__udivmodhi4_loop>
    1fd4:	80 95       	com	r24
    1fd6:	90 95       	com	r25
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	08 95       	ret

00001fde <__prologue_saves__>:
    1fde:	2f 92       	push	r2
    1fe0:	3f 92       	push	r3
    1fe2:	4f 92       	push	r4
    1fe4:	5f 92       	push	r5
    1fe6:	6f 92       	push	r6
    1fe8:	7f 92       	push	r7
    1fea:	8f 92       	push	r8
    1fec:	9f 92       	push	r9
    1fee:	af 92       	push	r10
    1ff0:	bf 92       	push	r11
    1ff2:	cf 92       	push	r12
    1ff4:	df 92       	push	r13
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	ca 1b       	sub	r28, r26
    2008:	db 0b       	sbc	r29, r27
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	09 94       	ijmp

00002016 <__epilogue_restores__>:
    2016:	2a 88       	ldd	r2, Y+18	; 0x12
    2018:	39 88       	ldd	r3, Y+17	; 0x11
    201a:	48 88       	ldd	r4, Y+16	; 0x10
    201c:	5f 84       	ldd	r5, Y+15	; 0x0f
    201e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2020:	7d 84       	ldd	r7, Y+13	; 0x0d
    2022:	8c 84       	ldd	r8, Y+12	; 0x0c
    2024:	9b 84       	ldd	r9, Y+11	; 0x0b
    2026:	aa 84       	ldd	r10, Y+10	; 0x0a
    2028:	b9 84       	ldd	r11, Y+9	; 0x09
    202a:	c8 84       	ldd	r12, Y+8	; 0x08
    202c:	df 80       	ldd	r13, Y+7	; 0x07
    202e:	ee 80       	ldd	r14, Y+6	; 0x06
    2030:	fd 80       	ldd	r15, Y+5	; 0x05
    2032:	0c 81       	ldd	r16, Y+4	; 0x04
    2034:	1b 81       	ldd	r17, Y+3	; 0x03
    2036:	aa 81       	ldd	r26, Y+2	; 0x02
    2038:	b9 81       	ldd	r27, Y+1	; 0x01
    203a:	ce 0f       	add	r28, r30
    203c:	d1 1d       	adc	r29, r1
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	ed 01       	movw	r28, r26
    204a:	08 95       	ret

0000204c <_exit>:
    204c:	f8 94       	cli

0000204e <__stop_program>:
    204e:	ff cf       	rjmp	.-2      	; 0x204e <__stop_program>
